// Generated by CoffeeScript 1.6.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.coreBuilder = {};

  (function($, coreBuilder, _, Backbone, ace) {
    var _ref, _ref1, _ref2, _ref3, _ref4, _ref5;
    coreBuilder.sources = [];
    coreBuilder.Utils = {};
    coreBuilder.Utils.generateUid = function(separator) {
      var S4, delim;
      delim = separator != null ? separator : "-";
      S4 = function() {
        return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
      };
      return S4() + S4() + delim + S4() + delim + S4() + delim + S4() + delim + S4() + S4() + S4();
    };
    coreBuilder.core = (function(_super) {
      __extends(core, _super);

      function core() {
        _ref = core.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      core.prototype.defaults = {
        "app": []
      };

      return core;

    })(Backbone.Model);
    coreBuilder.selection = (function(_super) {
      __extends(selection, _super);

      function selection() {
        _ref1 = selection.__super__.constructor.apply(this, arguments);
        return _ref1;
      }

      return selection;

    })(Backbone.Model);
    ({
      defaults: {
        "source": "",
        "elements": []
      }
    });
    coreBuilder.Components = {};
    coreBuilder.Components.multiselect = function(target) {
      return $(target).multiselect({
        buttonClass: 'btn',
        buttonWidth: 'auto',
        buttonContainer: '<div class="btn-group" />',
        maxHeight: false,
        buttonText: function(options) {
          var sel;
          sel = [];
          if (options.length > 0) {
            options.each(function() {
              var editor, source_id, url;
              source_id = $(this).text();
              sel.push(source_id);
              if ($('#ed_' + source_id).get(0) == null) {
                target = $("<div class='editor' id='ed_" + source_id + "'> </div>");
                $('#editors').append(target);
                editor = ace.edit(target.attr("id"));
                editor.setTheme("ace/theme/monokai");
                editor.getSession().setMode("ace/mode/xml");
                url = 'data/' + source_id + '.xml';
                return $.get(url, function(data) {
                  editor.getSession().insert({
                    column: 0,
                    row: 0
                  }, data);
                  console.log(editor);
                  return editor.moveCursorTo({
                    column: 0,
                    row: 0
                  });
                }, 'text');
              }
            });
          }
          if (sel.length === 0) {
            return 'None selected <b class="caret"></b>';
          }
          return sel.join(", ") + ' <b class="caret"></b>';
        }
      });
    };
    coreBuilder.appEntry = (function(_super) {
      __extends(appEntry, _super);

      function appEntry() {
        _ref2 = appEntry.__super__.constructor.apply(this, arguments);
        return _ref2;
      }

      appEntry.prototype.model = coreBuilder.selection;

      appEntry.prototype.initialize = function() {};

      return appEntry;

    })(Backbone.Collection);
    coreBuilder.coreView = (function(_super) {
      __extends(coreView, _super);

      function coreView() {
        _ref3 = coreView.__super__.constructor.apply(this, arguments);
        return _ref3;
      }

      coreView.prototype.template = _.template($('#core-tpl').html());

      coreView.prototype.initialize = function() {
        this.listenTo(this.model, 'change', this.render);
        return this.listenTo(this.model, 'destroy', this.remove);
      };

      coreView.prototype.render = function() {
        this.$el.html(this.template(this.model.toJSON()));
        sh_highlightDocument();
        this.bindRemove(this.model);
        return this;
      };

      coreView.prototype.bindRemove = function(model) {
        return $('.remove').click(function() {
          var app, idx;
          idx = /_(\d+)/.exec($(this).attr('id'))[1];
          app = model.toJSON().app;
          return model.set(app.splice(0, idx).concat(app.splice(idx, app.length)));
        });
      };

      return coreView;

    })(Backbone.View.extend);
    coreBuilder.appView = (function(_super) {
      __extends(appView, _super);

      function appView() {
        _ref4 = appView.__super__.constructor.apply(this, arguments);
        return _ref4;
      }

      appView.prototype.template = _.template($('#app-tpl').html());

      appView.prototype.initialize = function() {};

      appView.prototype.render = function() {
        this.$el.html(this.template({}));
        this.collection.each(this.addOne, this);
        return this;
      };

      appView.prototype.addOne = function(model) {
        var view;
        view = new coreBuilder.selectionView({
          model: model
        });
        $('#cur_grp').show().append(view.render().$el);
        $('#save').show();
        return $('#makeNew').hide();
      };

      appView.prototype.updateCore = function() {
        var c, col, rgroup, _i, _len;
        col = $.grep(this.collection.toJSON(), function(e, i) {
          return (e.source != null) && e.source !== "";
        });
        rgroup = {
          rdg: [],
          id: coreBuilder.Utils.generateUid()
        };
        for (_i = 0, _len = col.length; _i < _len; _i++) {
          c = col[_i];
          rgroup.rdg.push({
            source: c.source,
            ptr: c.elements
          });
        }
        return core.attributes.app.push(rgroup);
      };

      return appView;

    })(Backbone.View);
    coreBuilder.selectionView = (function(_super) {
      __extends(selectionView, _super);

      function selectionView() {
        _ref5 = selectionView.__super__.constructor.apply(this, arguments);
        return _ref5;
      }

      return selectionView;

    })(Backbone.View);
    return {
      template: _.template($('#sel-tpl').html()),
      initialize: function() {
        this.listenTo(this.model, 'change', this.render);
        return this.listenTo(this.model, 'destroy', this.remove);
      },
      render: function() {
        this.$el.html(this.template(this.model.toJSON()));
        return this;
      }
    };
  })(jQuery, coreBuilder, _, Backbone, ace);

}).call(this);
